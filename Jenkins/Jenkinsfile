pipeline {
    agent none
    // options {
    //     skipDefaultCheckout() // This prevents the automatic git clone
    // }
    // Define global environment variables
    environment {
        GIT_REPO = 'https://github.com/jonny-levi/pchauhan.git'
        DOCKER_REGISTRY = '659797033228.dkr.ecr.us-east-1.amazonaws.com/demo-project-ecr-repo'
        DOCKER_REGISTRY_TAG = 'v1.0.0'
        NAMESPACE = 'demo-project-namespace'
        AWS_REGION = 'us-east-1'
        AWS_ACCESS_KEY_ID = 'AKIAZTHXXYEGEZUUMUYA'
        AWS_SECRET_ACCESS_KEY = '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'
    }

    // Define pipeline stages
    stages {
        // Stage to build and push Docker image using Kaniko on a Kubernetes pod
        stage('Build with Kaniko') {
            agent {
                kubernetes {
                    yamlFile 'kaniko-builder.yaml'  // Define the Kaniko builder pod
                }
            }
            steps {
                container(name: 'kaniko', shell: '/busybox/sh') {
                    script {
                        git branch: 'main', credentialsId: 'git-creds', url: GIT_REPO
                        sh '''

                        /kaniko/executor --dockerfile `pwd`/Jenkins/Dockerfile --context `pwd` \
                        --destination=${DOCKER_REGISTRY}:${DOCKER_REGISTRY_TAG} \
                        --insecure --skip-tls-verify
                        '''
                    }
                }
            }
        }

                // Stage to deploy the image to Kubernetes using another agent
        stage('Deploy to Kubernetes') {
            agent {
                kubernetes  // Specify another Jenkins agent with a specific label
            }
            steps {
                script {
                    withKubeConfig([credentialsId: 'kubeconfig-credential-id']) {
                        sh '''
                        
                        kubectl create namespace ${NAMESPACE} || echo "Namespace ${NAMESPACE} already exists"
                        
                        helm install -f laravel/values.yaml pchauhan-project ./laravel
                        '''
                    }
                }
            }
        }
                // Stage to deploy the image to Kubernetes using another agent
        stage('Delete resources') {
            agent {
                kubernetes  // Specify another Jenkins agent with a specific label
            }
            steps {
                script {
                    withKubeConfig([credentialsId: 'kubeconfig-credential-id']) {
                        sh '''
                        
                        kubectl delete namespace ${NAMESPACE} || echo "Namespace ${NAMESPACE} already exists"
                        
                        helm uninstall pchauhan-project
                        '''
                    }
                }
            }
        }


        // Stage to run unit tests in a Docker container on a different agent
        // stage('Run Tests') {
        //     agent {
        //         docker {
        //             image 'python:3.8'  // Use a Python Docker container for testing
        //             args '-v /tmp:/tmp'  // Pass any Docker run arguments here
        //         }
        //     }
        //     steps {
        //         sh '''
        //         pip install -r requirements.txt
        //         pytest
        //         '''
        //     }
        // }
    }
}


// curl https://baltocdn.com/helm/signing.asc | gpg --dearmor | sudo tee /usr/share/keyrings/helm.gpg > /dev/null
//                         sudo apt-get install apt-transport-https --yes
//                         echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
//                         sudo apt-get update
//                         sudo apt-get install helm