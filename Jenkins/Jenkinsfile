pipeline {
    // Define global environment variables
    environment {
        GIT_REPO = ''
        DOCKER_REGISTRY = ''
        DOCKER_REGISTRY_TAG = '659797033228.dkr.ecr.us-east-1.amazonaws.com/demo-project-ecr-repo'
        NAMESPACE = 'my-namespace'
    }

    // Define pipeline stages
    stages {
        // Stage to build and push Docker image using Kaniko on a Kubernetes pod
        stage('Build with Kaniko') {
            agent {
                kubernetes {
                    yamlFile 'kaniko-builder.yaml'  // Define the Kaniko builder pod
                }
            }
            steps {
                container(name: 'kaniko', shell: '/busybox/sh') {
                    script {
                        git branch: 'main', credentialsId: '', url: GIT_REPO
                        sh '''
                        /kaniko/executor --dockerfile `pwd`/Dockerfile --context `pwd` \
                        --destination=${DOCKER_REGISTRY_TAG}:v1.0.0 \
                        --insecure --skip-tls-verify
                        '''
                    }
                }
            }
        }

        // Stage to run unit tests in a Docker container on a different agent
        stage('Run Tests') {
            agent {
                docker {
                    image 'python:3.8'  // Use a Python Docker container for testing
                    args '-v /tmp:/tmp'  // Pass any Docker run arguments here
                }
            }
            steps {
                sh '''
                pip install -r requirements.txt
                pytest
                '''
            }
        }

        // Stage to deploy the image to Kubernetes using another agent
        stage('Deploy to Kubernetes') {
            agent {
                label 'kubernetes-deployer'  // Specify another Jenkins agent with a specific label
            }
            steps {
                script {
                    withKubeConfig([credentialsId: 'kubeconfig-credential-id']) {
                        sh '''
                        kubectl create namespace ${NAMESPACE} || echo "Namespace ${NAMESPACE} already exists"
                        kubectl apply -f k8s/deployment.yaml -n ${NAMESPACE}
                        '''
                    }
                }
            }
        }
    }
}
